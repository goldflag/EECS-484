CREATE TABLE USERS
        (USER_ID NUMBER,
        FIRST_NAME VARCHAR2(100) NOT NULL,
        LAST_NAME VARCHAR2(100) NOT NULL,
        YEAR_OF_BIRTH INTEGER,
        MONTH_OF_BIRTH INTEGER,
        DAY_OF_BIRTH INTEGER,
        GENDER VARCHAR2(100),
        CONSTRAINT user_id_key PRIMARY KEY (USER_ID));
        
CREATE TABLE FRIENDS
        (USER1_ID NUMBER NOT NULL,
        USER2_ID NUMBER NOT NULL);

CREATE TRIGGER order_friends_pairs
    BEFORE INSERT ON FRIENDS
    FOR EACH ROW
        DECLARE temp NUMBER;
        BEGIN
            IF :NEW.USER1_ID > :NEW.USER2_ID THEN
                temp := :NEW.USER2_ID;
                :NEW.USER2_ID := :NEW.USER1_ID;
                :NEW.USER1_ID := temp;
            END IF ;

        END;
/

CREATE TABLE CITIES
        (CITY_ID INTEGER GENERATED AS IDENTITY,
        CITY_NAME VARCHAR2(100) NOT NULL,
        STATE_NAME VARCHAR2(100) NOT NULL,
        COUNTRY_NAME VARCHAR2(100) NOT NULL,
        PRIMARY KEY (CITY_ID));

CREATE TABLE USER_CURRENT_CITIES
        (USER_ID NUMBER,
        CURRENT_CITY_ID INTEGER);

CREATE TABLE USER_HOMETOWN_CITIES
        (USER_ID NUMBER,
        HOMETOWN_CITY_ID INTEGER);

CREATE TABLE MESSAGES
        (MESSAGE_ID NUMBER PRIMARY KEY,
        SENDER_ID NUMBER,
        RECEIVER_ID NUMBER,
        MESSAGE_CONTENT VARCHAR2(2000) NOT NULL,
        SENT_TIME TIMESTAMP NOT NULL);
        
CREATE TABLE PROGRAMS
        (PROGRAM_ID INTEGER GENERATED AS IDENTITY,
        INSTITUTION VARCHAR2(100) NOT NULL,
        CONCENTRATION VARCHAR2(100) NOT NULL,
        DEGREE VARCHAR2(100) NOT NULL,
        CONSTRAINT program_key PRIMARY KEY (PROGRAM_ID));

CREATE TABLE EDUCATION
        (USER_ID NUMBER NOT NULL,
        PROGRAM_ID INTEGER NOT NULL,
        PROGRAM_YEAR INTEGER NOT NULL,
        CONSTRAINT foreign_USER_ID
            FOREIGN KEY (USER_ID)
            REFERENCES USERS(USER_ID),
        CONSTRAINT foreign_PROGRAM_ID
            FOREIGN KEY (PROGRAM_ID)
            REFERENCES PROGRAMS(PROGRAM_ID)
);

CREATE TABLE USER_EVENTS
        (EVENT_ID NUMBER PRIMARY KEY,
        EVENT_CREATOR_ID NUMBER NOT NULL,
        EVENT_NAME VARCHAR2(100) NOT NULL,
        EVENT_TAGLINE VARCHAR2(100),
        EVENT_DESCRIPTION VARCHAR2(100),
        EVENT_HOST VARCHAR2(100),
        EVENT_TYPE VARCHAR2(100),
        EVENT_SUBTYPE VARCHAR2(100),
        EVENT_ADDRESS VARCHAR2(2000),
        EVENT_CITY_ID INTEGER NOT NULL,
        EVENT_START_TIME TIMESTAMP,
        EVENT_END_TIME TIMESTAMP);

CREATE TABLE PARTICIPANTS
        (EVENT_ID NUMBER NOT NULL,
        USER_ID NUMBER NOT NULL,
        CONFIRMATION VARCHAR2(100) NOT NULL);

CREATE TABLE ALBUMS
        (ALBUM_ID NUMBER PRIMARY KEY,
        ALBUM_OWNER_ID NUMBE  NOT NULL,
        ALBUM_NAME VARCHAR2(100) NOT NULL,
        ALBUM_CREATED_TIME TIMESTAMP NOT NULL,
        ALBUM_MODIFIED_TIME TIMESTAMP,
        ALBUM_LINK VARCHAR2(100) NOT NULL,
        ALBUM_VISIBILTY VARCHAR2(100) CHECK( ALBUM_VISIBILTY IN ('EVERYONE','FRIENDS','FRIENDS_OF_FRIENDS', 'MYSELF') ),
        COVER_PHOTO_ID NUMBER NOT NULL);

CREATE TABLE PHOTOS
        (PHOTO_ID NUMBER NOT NULL,
        ALBUM_ID NUMBER NOT NULL,
        PHOTO_CAPTION VARCHAR2(2000),
        PHOTO_CREATED_TIME TIMESTAMP NOT NULL,
        PHOTO_MODIFIED_TIME TIMESTAMP,
        PHOTO_LINK VARCHAR2(2000) NOT NULL);

CREATE TABLE TAGS
        (TAG_PHOTO_ID NUMBER NOT NULL,
        TAG_SUBJECT_ID NUMBER NOT NULL,
        TAG_CREATED_TIME TIMESTAMP NOT NULL,
        TAG_X NUMBER NOT NULL,
        TAG_Y NUMBER NOT NULL);
